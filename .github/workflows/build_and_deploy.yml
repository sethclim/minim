name: Build, Release, and Deploy

on:
  workflow_dispatch:

jobs:
  build_release_deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 14

    - name: Install dependencies
      run: yarn install

    - name: Build extension
      run: bash make_extension.sh

    - name: Get version from version.json
      id: version
      run: |
        VERSION=$(jq -r '.version' src/version.json)
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Find zip and xpi files
      id: findfiles
      run: |
        ZIP_FILE=$(ls *.zip | head -n 1)
        XPI_FILE=$(ls *.xpi | head -n 1)
        echo "ZIP_FILE=$ZIP_FILE" >> $GITHUB_ENV
        echo "zip_file=$ZIP_FILE" >> $GITHUB_OUTPUT
        echo "XPI_FILE=$XPI_FILE" >> $GITHUB_ENV
        echo "xpi_file=$XPI_FILE" >> $GITHUB_OUTPUT

    - name: Create GitHub release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.version.outputs.version }}
        release_name: Release v${{ steps.version.outputs.version }}

    - name: Upload zip release asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./${{ steps.findfiles.outputs.zip_file }}
        asset_name: ${{ steps.findfiles.outputs.zip_file }}
        asset_content_type: application/zip

    - name: Upload xpi release asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./${{ steps.findfiles.outputs.xpi_file }}
        asset_name: ${{ steps.findfiles.outputs.xpi_file }}
        asset_content_type: application/x-xpinstall

    - name: Deploy dist to GitHub Pages
      run: |
        git config --global user.email "action@github.com"
        git config --global user.name "GitHub Action"

        # Fetch gh-pages branch if it exists
        git fetch origin gh-pages

        # Create a new orphan branch based on gh-pages or start clean
        git worktree add gh-pages-deploy
        cd gh-pages-deploy
        git checkout --orphan gh-pages

        # Clean all files
        git rm -rf .

        # Copy dist contents into this folder
        cp -r ../dist/* .

        echo "minim.tulv.in" > CNAME

        # Commit and push
        git add .
        git commit -m "Deploy GitHub Pages"
        git push --force origin gh-pages

        # Clean up
        cd ..
        git worktree remove gh-pages-deploy
